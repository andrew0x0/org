subscribe_publish_sample
* main
** parseInputArgsForConnectParams
** getcwd
** aws_iot_mqtt_init
*** aws_iot_mqtt_set_connect_params
*** iot_tls_init
**** register
	  pNetwork->connect = iot_tls_connect;
	  pNetwork->read = iot_tls_read;
	  pNetwork->write = iot_tls_write;
	  pNetwork->disconnect = iot_tls_disconnect;
	  pNetwork->isConnected = iot_tls_is_connected;
	  pNetwork->destroy = iot_tls_destroy;
**** iot_tls_connect
***** _iot_tls_set_connect_params
***** tls init
	mbedtls_net_init(&(tlsDataParams->server_fd));
	mbedtls_ssl_init(&(tlsDataParams->ssl));
	mbedtls_ssl_config_init(&(tlsDataParams->conf));
	mbedtls_ctr_drbg_init(&(tlsDataParams->ctr_drbg));
	mbedtls_x509_crt_init(&(tlsDataParams->cacert));
	mbedtls_x509_crt_init(&(tlsDataParams->clicert));
	mbedtls_pk_init(&(tlsDataParams->pkey));

***** mbedtls_entropy_init
***** mbedtls_ctr_drbg_seed
****** mbedtls_ctr_drbg_seed_entropy_len
******* mbedtls_aes_init
******* mbedtls_aes_setkey_enc
******* mbedtls_ctr_drbg_reseed
***** mbedtls_x509_crt_parse_file
****** mbedtls_pk_load_file
****** mbedtls_x509_crt_parse
******* mbedtls_pem_read_buffer
***** mbedtls_pk_parse_keyfile
****** mbedtls_pk_load_file
****** mbedtls_pk_parse_key
******* TODO Malloc
	
***** mbedtls_net_connect
****** getaddrinfo 
****** socket
****** connect

***** mbedtls_net_set_block
******     fcntl( ctx->fd, F_SETFL, fcntl( ctx->fd, F_GETFL ) & ~O_NONBLOCK )
***** mbedtls_ssl_config_defaults
      	mbedtls_ssl_conf_verify(&(tlsDataParams->conf), _iot_tls_verify_cert, NULL);
***** pNetwork->tlsConnectParams.ServerVerificationFlag == true
      		mbedtls_ssl_conf_authmode(&(tlsDataParams->conf), MBEDTLS_SSL_VERIFY_REQUIRED)
		
***** mbedtls_ssl_conf_authmode

***** mbedtls_ssl_conf_rng

***** mbedtls_ssl_conf_ca_chain

***** mbedtls_ssl_conf_own_cert
 
***** mbedtls_ssl_conf_read_timeout

***** mbedtls_ssl_setup
****** mbedtls_calloc
****** ssl_handshake_init

***** mbedtls_ssl_set_hostname
****** mbedtls_calloc

***** mbedtls_ssl_set_bio
****** mbedtls_net_send
****** mbedtls_net_recv_timeout

***** mbedtls_ssl_handshake
****** while
******* mbedtls_ssl_handshake_step
******** mbedtls_ssl_handshake_client_step
********* case MBEDTLS_SSL_HELLO_REQUEST:
	     ssl->state = MBEDTLS_SSL_CLIENT_HELLO
********* case MBEDTLS_SSL_CLIENT_HELLO
********** ssl_write_client_hello
	    ssl->state++;
***********  mbedtls_ssl_write_version 
************ ssl_generate_random
************* ssl->conf->f_rng
************ mbedtls_ssl_write_record
************* mbedtls_ssl_write_version
************* mbedtls_ssl_flush_output
************** while
	       ssl->f_send
********* case MBEDTLS_SSL_SERVER_HELLO:
********** ssl_parse_server_hello( ssl );
*********** mbedtls_ssl_read_record
************ ssl_prepare_handshake_record
************ mbedtls_ssl_fetch_input
************* ssl->f_recv
************ ssl_parse_record_header
************  mbedtls_ssl_fetch_input
************ ssl_prepare_record_content
*********** mbedtls_ssl_read_version
*********** mbedtls_ssl_ciphersuite_from_id

*********** mbedtls_x509_crt_verify_with_profile

*********** mbedtls_x509_crt_parse_der( ssl->session_negotiate->peer_cert
********* case MBEDTLS_SSL_SERVER_CERTIFICATE:
********** mbedtls_ssl_parse_certificate( ssl ); 
********** 
***** mbedtls_ssl_get_record_expansion
      
***** mbedtls_ssl_get_verify_result


**** iot_tls_read
***** mbedtls_ssl_read
**** iot_tls_write
***** mbedtls_ssl_write
**** iot_tls_disconnect
***** mbedtls_ssl_close_notify
**** iot_tls_is_connected
**** iot_tls_destroy
**** 	
	mbedtls_net_free(&(tlsDataParams->server_fd));
	mbedtls_x509_crt_free(&(tlsDataParams->clicert));
	mbedtls_x509_crt_free(&(tlsDataParams->cacert));
	mbedtls_pk_free(&(tlsDataParams->pkey));
	mbedtls_ssl_free(&(tlsDataParams->ssl));
	mbedtls_ssl_config_free(&(tlsDataParams->conf));
	mbedtls_ctr_drbg_free(&(tlsDataParams->ctr_drbg));
	mbedtls_entropy_free(&(tlsDataParams->entropy));
	
** aws_iot_mqtt_connect
*** aws_iot_mqtt_get_client_state 
*** _aws_iot_mqtt_is_client_state_valid_for_connect
*** aws_iot_mqtt_set_client_state
*** _aws_iot_mqtt_internal_connect
**** aws_iot_mqtt_set_connect_params
**** TLS connect 
     pClient->networkStack.connect
**** init_timer & countdown_ms
**** _aws_iot_mqtt_serialize_connect
     TODO
**** aws_iot_mqtt_internal_send_packet 
**** aws_iot_mqtt_internal_wait_for_read
**** _aws_iot_mqtt_deserialize_connack
**** countdown_sec
** aws_iot_mqtt_autoreconnect_set_status
** aws_iot_mqtt_subscribe
*** iot_subscribe_callback_handler
**** _aws_iot_mqtt_internal_subscribe(pClient, pTopicName, topicNameLen, qos,pApplicationHandler, pApplicationHandlerData);
***** _aws_iot_mqtt_serialize_subscribe(, , , , , &pTopicName, &topicNameLen, &qos, &serializedLen);
****** 	init_timer(&timer);countdown_ms(&timer, pClient->clientData.commandTimeoutMs); 
****** aws_iot_mqtt_get_next_packet_id(pClient);
****** _aws_iot_mqtt_serialize_subscribe
****** _aws_iot_mqtt_get_free_message_handler_index(pClient);
******  aws_iot_mqtt_internal_send_packet(pClient, serializedLen, &timer);
******  aws_iot_mqtt_internal_wait_for_read(pClient, SUBACK, &timer);
****** _aws_iot_mqtt_deserialize_suback(&rxPacketId, 1, &count, grantedQoS, pClient->clientData.readBuf,pClient->clientData.readBufSize);
****** 	pClient->clientData.messageHandlers[indexOfFreeMessageHandler].pApplicationHandler =pApplicationHandler;
** while
*** aws_iot_mqtt_yield
**** 	clientState = aws_iot_mqtt_get_client_state(pClient);
**** rc = aws_iot_mqtt_set_client_state(pClient, CLIENT_STATE_CONNECTED_IDLE,
										   CLIENT_STATE_CONNECTED_YIELD_IN_PROGRESS);
**** yieldRc = _aws_iot_mqtt_internal_yield(pClient, timeout_ms);
*****  aws_iot_mqtt_internal_cycle_read(pClient, &timer, &packet_type);
****** DONE rc = _aws_iot_mqtt_internal_read_packet(pClient, pTimer, pPacketType);
****** _aws_iot_mqtt_internal_handle_publish
****** 	rc = aws_iot_mqtt_internal_deserialize_publish(&msg.isDup, &msg.qos, &msg.isRetained,
												   &msg.id, &topicName, &topicNameLen,
												   (unsigned char **) &msg.payload, &msg.payloadLen,
												   pClient->clientData.readBuf,
												   pClient->clientData.readBufSize);
****** rc = _aws_iot_mqtt_internal_deliver_message(pClient, topicName, topicNameLen, &msg);
******* pClient->clientData.messageHandlers[itr].pApplicationHandler(pClient, pTopicName, topicNameLen,
			pMessageParams,
			Client->clientData.messageHandlers[itr].pApplicationHandlerData);
****** rc = aws_iot_mqtt_internal_serialize_ack(pClient->clientData.writeBuf, pClient->clientData.writeBufSize,
											 PUBACK, 0, msg.id, &len);
****** rc = aws_iot_mqtt_internal_send_packet(pClient, len, pTimer);
*****  _aws_iot_mqtt_keep_alive(pClient);
**** rc = aws_iot_mqtt_set_client_state(pClient, CLIENT_STATE_CONNECTED_YIELD_IN_PROGRESS,
										   CLIENT_STATE_CONNECTED_IDLE);

*** aws_iot_mqtt_publish
**** QOS need code to implementation
     
* mqtt server setup 

** mosquitto
   https://www.digitalocean.com/community/questions/how-to-setup-a-mosquitto-mqtt-server-and-receive-data-from-owntracks
   mosquitto -c /etc/mosquitto/mosquitto.conf
   mosquitto_sub -h 192.168.1.106 -p 8883 -v -t 'owntracks/#' -u owntracks -P 123321
   
** mosquitto.conf for cert verify
listener 8883 192.168.1.99
certfile /etc/nginx/ssl/nginx.crt
keyfile /etc/nginx/ssl/nginx.key
cafile /etc/nginx/ssl/client/ca.crt
require_certificate false #server will verify client cert when true
tls_version tlsv1.2
persistence true
persistence_location /var/lib/mosquitto/
persistence_file mosquitto.db
log_dest syslog
log_dest stdout
log_dest topic
log_type error
log_type warning
log_type notice
log_type information
connection_messages true
log_timestamp true
allow_anonymous true
