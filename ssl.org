* Study org
* setup pc site ssl
** get openssl client code and modify
   https://wiki.openssl.org/index.php/SSL/TLS_Client
   DONE
** setup nginx+openssl server
   DONE
   https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04
   https://www.feistyduck.com/library/openssl-cookbook/online/ch-openssl.html
** test with choosed cihped
   DONE TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
** study openssl
   learn details about tls protocol handshake
   http://www.jianshu.com/p/042dc1ba6815
* github with CA problems soluation
** Make sure first that you have certificates installed on your Debian in /etc/ssl/certs.If not, reinstall them:
   sudo apt-get install --reinstall ca-certificates
** Since that package does not include root certificates, add:
  sudo mkdir /usr/local/share/ca-certificates/cacert.org
  sudo wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt
  sudo update-ca-certificates
** troubleshoot
ssh-keygen 產生出 id_rsa, id_rsa.pub, 已經都放到正確位置(.ssh), 但是連線時卻出現下述訊息:

Agent admitted failure to sign using the key


解法

於自己的機器上, 執行 ssh-add, 會出現下述訊息.

Identity added: /home/user/.ssh/id_rsa (/home/user/.ssh/id_rsa)
** Make sure your git does reference those CA:
  git config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt


* debug with openssl
** put .so under /usr/local/lib should using sudo ldconfig to enable
   OPENSSL_LDFLAGS = -pthread -L $(OPENSSL_LIBDIR) -lssl -lcrypto -ldl
** build with -g
 ./config shared --prefix=/usr/local --openssldir=/home/andrew/Downlands/ssl -d

**  error with 
    /usr/bin/ld: cannot find -lefence  collect2: error: ld returned 1 exit status
        sudo ln -s /usr/lib/i386-linux-gnu/gstreamer-0.10/libgstefence.so /usr/lib/libefence.so

* study arm ssl
** get mbed ssl code mbedtls-2.3
** complie mbedtls as shared debug mode
   just modify Makefile
   由于 library 目录下的 Makefile 有 BUG，导致生成的动态库不能用，需要修改 library/Makefile 文件：
   libmbedtls.${DLEXT}: $(OBJS)
        echo "  LD    $@"
        $(CC) -shared -Wl,-soname,$(SONAME) -o $@ $(OBJS) ${LDFLAGS} (将 ${LDFLAGS} 放到最后)

   libmbedtls.dylib: $(OBJS)
        echo "  LD    $@"
	$(CC) -dynamiclib -o $@ $(OBJS) ${LDFLAGS} (将 ${LDFLAGS} 放到最后)
** complie mbedtls for stm 32
   http://hobbymc.blogspot.com/2011/02/stm32-discovery-porting-polar-ssl.html
   
   https://tls.mbed.org/discussions/generic/mbedtls-build-for-arm

   scripts/config.pl unset MBEDTLS_NET_C
   scripts/config.pl unset MBEDTLS_TIMING_C
   scripts/config.pl unset MBEDTLS_FS_IO
   CC=arm-none-eabi-gcc AR=arm-none-eabi-ar LD=arm-none-eabi-ld
   
   As you can see, we need to disable the network module and a few others, 
   but since you want to use your own TCP/IP stack it's not a problem. 
   You'll just need to provide read and write callbacks to the SSL/TLS layer with mbedtls_ssl_set_bio() 
   it always works this way, the only difference is that you'll need to write the callbacks yourself
   instead of using the ones provided in net.c
   
   arm-none-eabi-gcc --specs=rdimon.specs   -Wl,--start-group -lgcc -lc -lm -lrdimon -Wl,--end-group


** mbedtls CA
    library/certs.c
** CA
   hostname  

   https://tls.mbed.org/kb/how-to/generate-a-self-signed-certificate
   
*** server CA
https://www.phildev.net/ssl/creating_ca.html
http://my.oschina.net/itblog/blog/651434

openssl req -new -key private/client_root.key -out private/client_root.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=Client/CN=Root"

openssl x509 -req -days 3650 -extfile /etc/ssl/openssl.cnf -extensions v3_ca -signkey private/ec.key -in private/ca.csr -out certs/ca.cer
openssl x509 -req -days 3650 -extfile /etc/ssl/openssl.cnf -extensions v3_ca -signkey private/client_root.key -in private/client_root.csr -out certs/client_root.cer
openssl req -new -key private/ec1.key -out private/ca1.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=CA1"

openssl x509 -req -days 365  -extfile /etc/ssl/openssl.cnf -extensions v3_ca -CA certs/ca.cer -CAkey private/ec.key -CAserial ca.srl -CAcreateserial -in private/ca1.csr -out certs/ca1.cer

openssl req -new -key private/srv.key -out private/srv.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=192.168.1.99"

openssl x509 -req -days 365  -extfile /etc/ssl/openssl.cnf -extensions v3_req -CA certs/ca1.cer -CAkey private/ca1.key -CAserial ca.srl -CAcreateserial -in private/srv.csr -out certs/srv.cer

openssl req -new -key private/srv1.key -out private/srv1.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=192.168.1.99"
openssl req -new -key private/cli0.key -out private/cli0.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=Andrew"
openssl req -new -key private/device2.key -out private/device2.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=ULU Device2"

openssl x509 -req -days 365  -extfile /etc/ssl/openssl.cnf -extensions v3_req -CA certs/srv.cer -CAkey private/srv.key -CAserial ca.srl -CAcreateserial -in private/srv1.csr -out certs/srv1.cer
openssl x509 -req -days 365  -extfile /etc/ssl/openssl.cnf -extensions v3_req -CA certs/client_root.cer -CAkey private/client_root.key -CAserial ca.srl -CAcreateserial -in private/cli0.csr -out certs/cli0.cer


** tls renegotiation 
   TLS记录的计数器溢出

TLS内部将数据包装成记录，并为每个记录指定唯一的64位序列号。每当发生记录交换时，序列号就随之增长。一旦序列号接近溢出，协议就会强制执行重新协商。然而，因为这个计数器本身的数字就非常大，所以实践中不太可能出现溢出。

2.2.3　会话恢复
完整的握手协议非常复杂，需要很多握手消息和两次网络往返才能开始发送客户端应用数据。此外，握手执行的密钥学操作通常需要密集的CPU处理。身份验证通常以客户端和服务器证书验证（以及证书吊销检查）的形式完成，需要更多的工作。这其中的许多消耗都可以通过简短握手的方式节约下来。

最初的会话恢复机制是，在一次完整协商的连接断开时，客户端和服务器都会将会话的安全参数保存一段时间。希望使用会话恢复的服务器为会话指定唯一的标识，称为会话ID。服务器在ServerHello消息中将会话ID发回客户端（请参见2.2.2节中的示例）。

希望恢复早先会话的客户端将适当的会话ID放入ClientHello消息，然后提交。服务器如果愿意恢复会话，就将相同的会话ID放入ServerHello消息返回，接着使用之前协商的主密钥生成一套新的密钥，再切换到加密模式，发送Finished消息。客户端收到会话已恢复的消息以后，也进行相同的操作。这样的结果是握手只需要一次网络往返
用来替代服务器会话缓存和恢复的方案是使用会话票证（sesession ticket）。它是2006年引入的（参见RFC 4507），随后在2008年进行了更新（参见RFC 5077）。使用这种方式，除了所有的状态都保持在客户端（与HTTP Cookie的原理类似）之外，其消息流与服务器会话缓存是一
** Choose one config.h file . suite-B 
*** check cert info
    openssl x509 -in srv.cert -noout -text

*** remove private key password
        openssl ec -in privkey.pem -out privkey.out

*** setup key pair
    openssl ecparam -genkey -name prime256v1 | openssl ec -out ec.key -aes128
   openssl ecparam -out test.pem -name prime256v1 -genkey
 
* tls protocol

** handshake
1. 客户端发送 client_hello, 包含一个随机数 random1。
2. 服务器回复 server_hello，包含一个随机数 random2，同时回复 certificate，携带了证书公钥P。
3. 客户端收到random2之后，就能够生成 premaster_secrect 以及 master_secrect。
  其中，premaster_secrect 长度为48个字节，前两个字节是协议版本号，剩下的46个字节填充一个随机数。结构如下：
  Struct {byte Version[2]; bute random[46];} 
 ** master_secrect 的生成算法简述如下
  Master_key = PRF(premaster_secrect, "master secrect", 随机数1+随机数2) 
  其中，PRF是一个随机函数，定义如下:
  PRF(secrect, label, seed) = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)
而 master secrect 包含了6部分内容，分别是用于校验内容一致性的密钥，用于对称内容加解密的密钥，
以及初始化向量(用于CBC模式)，客户端和服务器各一份，从上式可以看出，把premaster_key 赋值给 secrect， 
master key 赋值给 label，客户端和服务器的两个随机数做种子就能确定地求出一个 48位长的随机数。
4. 客户端使用证书公钥P将 premaster_secrect加密后发送给服务器。
5. 服务器使用私钥解密得到 premaster_secrect，又由于服务端之前就接收了随机数1，所以服务器根据相同的生成算法，在相同的输入参数下，求出了相同了 master secrect。

** key exchanged

openssl x509 -in certificate.cer -out certificate.pem -outform der

** SAN
首先我们将 openssl 的配置文件复制一份作临时使用，CentOS6 中 openssl 的配置文件在 /etc/pki/tls/openssl.cnf，将这个文件复制到 /tmp 下。

此文件的格式是类似 ini 的配置文件格式，找到 [ req ] 段落，加上下面的配置：

req_extetions = v3_req
这段配置表示在生成 CSR 文件时读取名叫 v3_req 的段落的配置信息，因此我们再在此配置文件中加入一段名为 v3_req 的配置：

[ v3_req ]
# Extensions to add to a certificate request

basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = www.ustack.in
DNS.2 = www.test.ustack.com


$ openssl req -new -sha256 \
    -key ustack.key \
    -subj "/C=CN/ST=Beijing/L=Beijing/O=UnitedStack/OU=Devops/CN=www.ustack.com" \
    -reqexts SAN \
    -config <(cat /etc/pki/tls/openssl.cnf \
        <(printf "[SAN]\nsubjectAltName=DNS:www.ustack.in,DNS:www.test.ustack.com")) \
    -out ustack.csr

openssl req -new -sha256 \
        -key private/server.key -out private/server.csr -subj "/C=CN/ST=GD/L=SZ/O=ULU/OU=RD/CN=mqttpipe.ulu.io" \
        -reqexts SAN \
        -config <(cat ../openssl.cnf \
           <(printf "[SAN]\nsubjectAltName=IP.1:119.139.199.35,IP.2:172.31.15.48")) \
        -out certs/server.cer
